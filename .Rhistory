sidebarPanel(
selectInput("sortby", "Sort by", names(mtcars)),
sliderInput("nrows", "Number of rows to display", 1, nrow(mtcars), 5)
),
mainPanel(
tableOutput("mytable")
)
)
)
)
)
)
# Define server ----------------------------------------------------------------
server <- shinyServer(function(input, output) {
filtered_data <- reactive({
mtcars[, c(input$xvar, input$yvar)] %>%
filter(!is.na(.[[1]]), !is.na(.[[2]]))
})
output$myplot <- renderPlot({
ggplot(filtered_data(), aes_string(x = names(filtered_data())[1], y = names(filtered_data())[2])) +
geom_point() +
if(input$smooth) geom_smooth(method = "lm")
})
output$mytable <- renderTable({
filtered_data() %>%
arrange(input$sortby) %>%
head(input$nrows)
})
})
# Create a Shiny app object ----------------------------------------------------
shinyApp(ui = ui, server = server)
# Load packages ----------------------------------------------------------------
library(shiny)
library(ggplot2)
library(tidyverse)
data <- read_delim('UAH-lower-troposphere-long.csv')
# Define UI --------------------------------------------------------------------
ui <- shinyUI(
navbarPage("My Shiny App",
# Inputs: Select variables to plot
tabsetPanel(
tabPanel("General Info",
sidebarLayout(
mainPanel(
p("This app uses satellite temperature data from UAH"),
)
)
),
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
selectInput("xvar", "X-axis", names(mtcars)),
selectInput("yvar", "Y-axis", names(mtcars), selected = "mpg"),
checkboxInput("smooth", "Add smooth line", FALSE)
),
mainPanel(
plotOutput("myplot")
)
)
),
tabPanel("Table",
sidebarLayout(
sidebarPanel(
selectInput("sortby", "Sort by", names(mtcars)),
sliderInput("nrows", "Number of rows to display", 1, nrow(mtcars), 5)
),
mainPanel(
tableOutput("mytable")
)
)
)
)
)
)
# Load packages ----------------------------------------------------------------
library(shiny)
library(ggplot2)
library(tidyverse)
data <- read_delim('UAH-lower-troposphere-long.csv')
# Define UI --------------------------------------------------------------------
ui <- shinyUI(
navbarPage("My Shiny App",
# Inputs: Select variables to plot
tabsetPanel(
tabPanel("General Info",
sidebarLayout(
mainPanel(
p("This app uses satellite temperature data from UAH"),
)
)
),
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
selectInput("xvar", "X-axis", names(mtcars)),
selectInput("yvar", "Y-axis", names(mtcars), selected = "mpg"),
checkboxInput("smooth", "Add smooth line", FALSE)
),
mainPanel(
plotOutput("myplot")
)
)
),
tabPanel("Table",
sidebarLayout(
sidebarPanel(
selectInput("sortby", "Sort by", names(mtcars)),
sliderInput("nrows", "Number of rows to display", 1, nrow(mtcars), 5)
),
mainPanel(
tableOutput("mytable")
)
)
)
)
)
)
# Load packages ----------------------------------------------------------------
library(shiny)
library(ggplot2)
library(tidyverse)
data <- read_delim('UAH-lower-troposphere-long.csv')
# Define UI --------------------------------------------------------------------
ui <- shinyUI(
navbarPage("My Shiny App",
# Inputs: Select variables to plot
tabsetPanel(
tabPanel("General Info",
sidebarLayout(
mainPanel(
p("This app uses satellite temperature data from UAH")
)
)
),
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
selectInput("xvar", "X-axis", names(mtcars)),
selectInput("yvar", "Y-axis", names(mtcars), selected = "mpg"),
checkboxInput("smooth", "Add smooth line", FALSE)
),
mainPanel(
plotOutput("myplot")
)
)
),
tabPanel("Table",
sidebarLayout(
sidebarPanel(
selectInput("sortby", "Sort by", names(mtcars)),
sliderInput("nrows", "Number of rows to display", 1, nrow(mtcars), 5)
),
mainPanel(
tableOutput("mytable")
)
)
)
)
)
)
# Load packages ----------------------------------------------------------------
library(shiny)
library(ggplot2)
library(tidyverse)
data <- read_delim('UAH-lower-troposphere-long.csv')
# Define UI --------------------------------------------------------------------
ui <- shinyUI(
navbarPage("My Shiny App",
# Inputs: Select variables to plot
tabsetPanel(
tabPanel("General Info",
sidebarLayout(
sidebarPanel(),
mainPanel(
p("This app uses satellite temperature data from UAH")
)
)
),
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
selectInput("xvar", "X-axis", names(mtcars)),
selectInput("yvar", "Y-axis", names(mtcars), selected = "mpg"),
checkboxInput("smooth", "Add smooth line", FALSE)
),
mainPanel(
plotOutput("myplot")
)
)
),
tabPanel("Table",
sidebarLayout(
sidebarPanel(
selectInput("sortby", "Sort by", names(mtcars)),
sliderInput("nrows", "Number of rows to display", 1, nrow(mtcars), 5)
),
mainPanel(
tableOutput("mytable")
)
)
)
)
)
)
# Define server ----------------------------------------------------------------
server <- shinyServer(function(input, output) {
filtered_data <- reactive({
mtcars[, c(input$xvar, input$yvar)] %>%
filter(!is.na(.[[1]]), !is.na(.[[2]]))
})
output$myplot <- renderPlot({
ggplot(filtered_data(), aes_string(x = names(filtered_data())[1], y = names(filtered_data())[2])) +
geom_point() +
if(input$smooth) geom_smooth(method = "lm")
})
output$mytable <- renderTable({
filtered_data() %>%
arrange(input$sortby) %>%
head(input$nrows)
})
})
# Create a Shiny app object ----------------------------------------------------
shinyApp(ui = ui, server = server)
# Load packages ----------------------------------------------------------------
library(shiny)
library(ggplot2)
library(tidyverse)
data <- read_delim('UAH-lower-troposphere-long.csv')
# Define UI --------------------------------------------------------------------
ui <- shinyUI(
navbarPage("My Shiny App",
# Inputs: Select variables to plot
tabsetPanel(
tabPanel("General Info",
sidebarLayout(
sidebarPanel(),
mainPanel(
p("This app uses satellite temperature data from UAH")
)
)
),
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
selectInput("xvar", "X-axis", names(mtcars)),
selectInput("yvar", "Y-axis", names(mtcars), selected = "mpg"),
checkboxInput("smooth", "Add smooth line", FALSE)
),
mainPanel(
plotOutput("myplot")
)
)
),
tabPanel("Table",
sidebarLayout(
sidebarPanel(
selectInput("sortby", "Sort by", names(mtcars)),
sliderInput("nrows", "Number of rows to display", 1, nrow(mtcars), 5)
),
mainPanel(
tableOutput("mytable")
)
)
)
)
)
)
# Define server ----------------------------------------------------------------
server <- shinyServer(function(input, output) {
filtered_data <- reactive({
mtcars[, c(input$xvar, input$yvar)] %>%
filter(!is.na(.[[1]]), !is.na(.[[2]]))
})
output$myplot <- renderPlot({
ggplot(filtered_data(), aes_string(x = names(filtered_data())[1], y = names(filtered_data())[2])) +
geom_point() +
if(input$smooth) geom_smooth(method = "lm")
})
output$mytable <- renderTable({
filtered_data() %>%
arrange(input$sortby) %>%
head(input$nrows)
})
})
# Create a Shiny app object ----------------------------------------------------
shinyApp(ui = ui, server = server)
# Load packages ----------------------------------------------------------------
library(shiny)
library(ggplot2)
library(tidyverse)
data <- read_delim('UAH-lower-troposphere-long.csv')
# Define UI --------------------------------------------------------------------
ui <- shinyUI(
navbarPage("My Shiny App",
# Inputs: Select variables to plot
tabsetPanel(
tabPanel("General Info",
p("This app uses satellite temperature data from",
strong("UAH")
)
),
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
selectInput("xvar", "X-axis", names(mtcars)),
selectInput("yvar", "Y-axis", names(mtcars), selected = "mpg"),
checkboxInput("smooth", "Add smooth line", FALSE)
),
mainPanel(
plotOutput("myplot")
)
)
),
tabPanel("Table",
sidebarLayout(
sidebarPanel(
selectInput("sortby", "Sort by", names(mtcars)),
sliderInput("nrows", "Number of rows to display", 1, nrow(mtcars), 5)
),
mainPanel(
tableOutput("mytable")
)
)
)
)
)
)
# Define server ----------------------------------------------------------------
server <- shinyServer(function(input, output) {
filtered_data <- reactive({
mtcars[, c(input$xvar, input$yvar)] %>%
filter(!is.na(.[[1]]), !is.na(.[[2]]))
})
output$myplot <- renderPlot({
ggplot(filtered_data(), aes_string(x = names(filtered_data())[1], y = names(filtered_data())[2])) +
geom_point() +
if(input$smooth) geom_smooth(method = "lm")
})
output$mytable <- renderTable({
filtered_data() %>%
arrange(input$sortby) %>%
head(input$nrows)
})
})
# Create a Shiny app object ----------------------------------------------------
shinyApp(ui = ui, server = server)
# Load packages ----------------------------------------------------------------
library(shiny)
library(ggplot2)
library(tidyverse)
data <- read_delim('UAH-lower-troposphere-long.csv')
# Define UI --------------------------------------------------------------------
ui <- shinyUI(
navbarPage("My Shiny App",
# Inputs: Select variables to plot
tabsetPanel(
tabPanel("General Info",
p("This app uses satellite temperature data from",
strong("UAH")
)
),
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
selectInput("xvar", "X-axis", names(data)),
selectInput("yvar", "Y-axis", names(data), selected = "mpg"),
checkboxInput("smooth", "Add smooth line", FALSE)
),
mainPanel(
plotOutput("myplot")
)
)
),
tabPanel("Table",
sidebarLayout(
sidebarPanel(
selectInput("sortby", "Sort by", names(data)),
sliderInput("nrows", "Number of rows to display", 1, nrow(mtcars), 5)
),
mainPanel(
tableOutput("mytable")
)
)
)
)
)
)
# Define server ----------------------------------------------------------------
server <- shinyServer(function(input, output) {
filtered_data <- reactive({
data[, c(input$xvar, input$yvar)] %>%
filter(!is.na(.[[1]]), !is.na(.[[2]]))
})
output$myplot <- renderPlot({
ggplot(filtered_data(), aes_string(x = names(filtered_data())[1], y = names(filtered_data())[2])) +
geom_point() +
if(input$smooth) geom_smooth(method = "lm")
})
output$mytable <- renderTable({
filtered_data() %>%
arrange(input$sortby) %>%
head(input$nrows)
})
})
# Create a Shiny app object ----------------------------------------------------
shinyApp(ui = ui, server = server)
# Load packages ----------------------------------------------------------------
library(shiny)
library(ggplot2)
library(tidyverse)
data <- read_delim('UAH-lower-troposphere-long.csv')
# Define UI --------------------------------------------------------------------
ui <- shinyUI(
navbarPage("My Shiny App",
# Inputs: Select variables to plot
tabsetPanel(
tabPanel("General Info",
p("This app uses satellite temperature data from",
strong("UAH")
)
),
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
selectInput("xvar", "X-axis", names(data)),
selectInput("yvar", "Y-axis", names(data), selected = "mpg"),
checkboxInput("smooth", "Add smooth line", FALSE)
),
mainPanel(
plotOutput("myplot")
)
)
),
tabPanel("Table",
sidebarLayout(
sidebarPanel(
selectInput("sortby", "Sort by", names(data)),
sliderInput("nrows", "Number of rows to display", 1, nrow(data), 5)
),
mainPanel(
tableOutput("mytable")
)
)
)
)
)
)
# Define server ----------------------------------------------------------------
server <- shinyServer(function(input, output) {
filtered_data <- reactive({
data[, c(input$xvar, input$yvar)] %>%
filter(!is.na(.[[1]]), !is.na(.[[2]]))
})
output$myplot <- renderPlot({
ggplot(filtered_data(), aes_string(x = names(filtered_data())[1], y = names(filtered_data())[2])) +
geom_point() +
if(input$smooth) geom_smooth(method = "lm")
})
output$mytable <- renderTable({
filtered_data() %>%
arrange(input$sortby) %>%
head(input$nrows)
})
})
# Create a Shiny app object ----------------------------------------------------
shinyApp(ui = ui, server = server)
# Load packages ----------------------------------------------------------------
library(shiny)
library(ggplot2)
library(tidyverse)
data <- read_delim('UAH-lower-troposphere-long.csv')
# Define UI --------------------------------------------------------------------
ui <- shinyUI(
navbarPage("My Shiny App",
# Inputs: Select variables to plot
tabsetPanel(
tabPanel("General Info",
p("This app uses satellite temperature data from",
strong("UAH")
)
),
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
selectInput("xvar", "X-axis", temp(data)),
selectInput("yvar", "Y-axis", year(data), selected = "mpg"),
checkboxInput("smooth", "Add smooth line", FALSE)
),
mainPanel(
plotOutput("myplot")
)
)
),
tabPanel("Table",
sidebarLayout(
sidebarPanel(
selectInput("sortby", "Sort by", names(data)),
sliderInput("nrows", "Number of rows to display", 1, nrow(data), 5)
),
mainPanel(
tableOutput("mytable")
)
)
)
)
)
)
library(shiny)
library(ggplot2)
library(dplyr)
# Load data
data <- read.csv("'UAH-lower-troposphere-long.csv'")
